; C65GS Kick Start ROM.
; Paul Gardner-Stephen, 2014.
;
; Purpose: 
; 1. Verify checksum of ROM area of slow RAM.
; 1. If checksum fails, load complete ROM from SD card.
; 2. Select default disk image for F011 emulation.
;
; The kickstart ROM is 8KB in length, and maps at $E000-$FFFF
; essentially the same as the C64 kernel.
;
; Kickstart modifies RAM from $0000-$07FF (ZP, stack, 40-column
; screen) during normal boot.
;
; If Kickstart needs to load the ROM from SD card, then it may
; modify the first 64KB of fast ram.
;
; We will use the convention of C=0 means failure, and C=1 means
; success.
;

; scratch space in ZP space usually used by kernel
	.data 
	.org $0080
	.space zptempv 2
	.space zptempv2 2
	.space romslab 1
	.space timerticks 1
	.space timerlimit 1
	.space screenrow 1

	.org $0200
	.space checksum 4
	.space part_startsector 4
	.space fs_startfat 4
	.space fs_syssectors 4
	.space fs_reservedclusters 4
	.space fs_rootdircluster 4
	.space fs_datasectors 4
	.space fs_clustercount 4
	.space fs_sectorspercluster 1
	.space fs_sector_in_cluster 1
	.space fs_clusternumber 4

	.text

     	    .org $E000

;	 .word $0801
;	 .org $0801
;
;	 .word _next, 10                       ; Next line and current line number
;	 .byte $97, "2,0:", $9e, " 2014", $AA, "65",0      ; POKE 2,0 : SYS 2014+65
;_next:	 .word 0
;
;	 .checkpc 2079
;	 .advance 2079


reset_entry:
		; get CPU state sensible
		sei
		cld
		cle
		ldx #$ff
		txs
		

		; We DO NOT need to mess with $01, because
		; the 4510 starts up with kickstart mapped at $E000, 
		; standard ($FFD0xxx) IO page mapped at $D000,
		; and fast RAM elsewhere.  So we just need to key $D02F
		; to get enhanced io
		sec
		jsr enhanced_io

		jsr resetdisplay
		jsr resetpalette
		jsr erasescreen

		; display welcome screen
		ldx #<msg_kickstart
		ldy #>msg_kickstart
		jsr printmessage
		inc screenrow

		; Check state of current ROM
		jsr checkromok
		bcc loadrom

		; ROM is loaded and ready, so transfer control
		; to it.
		ldx #<msg_romok
		ldy #>msg_romok
		jsr printmessage
		jmp go64

loadrom:	; ROM is not loaded, so try to load it, or prompt
		; for user to insert SD card
		ldx #<msg_rombad
		ldy #>msg_rombad
		jsr printmessage

		; Try to read the MBR from the SD card
		ldx #<msg_tryingsdcard
		ldy #>msg_tryingsdcard
		jsr printmessage
tryreadmbr:
		jsr readmbr
		bcs gotmbr

		jmp tryreadmbr
		
gotmbr:
		ldx #<msg_sdcardfound
		ldy #>msg_sdcardfound
		jsr printmessage
		; got master boot record
		lda #$3e           ; ">" character
		sta $07c0          ; $0400+(24*40)

		; map sector buffer
		lda #$81
		sta $d680

		lda $DFFE
		cmp #$55
		bne badfs
		lda $DFFF
		cmp #$AA
		bne badfs

		; read partition 1 details from $DFBE
		; $DFBE - $80 = bootable, $00 = inactive.  We ignore this
		; $DFC2 - Partition type
		; $DFC6 - Starting SECTOR number
		; $DFCA - Number of sectors in partition
		ldx #<msg_partitiondetails
		ldy #>msg_partitiondetails
		jsr printmessage
		; overwrite $ chars in template with hex digits
		ldy #$00
		ldz $DFC2
		jsr printhex
		ldz $DFC9
		stz part_startsector+3
		jsr printhex
		ldz $DFC8
		stz part_startsector+2
		jsr printhex
		ldz $DFC7
		stz part_startsector+1
		jsr printhex
		ldz $DFC6
		stz part_startsector+0
		jsr printhex
		ldz $DFCD
		jsr printhex
		ldz $DFCC
		jsr printhex
		ldz $DFCB
		jsr printhex
		ldz $DFCA
		jsr printhex

		; load start sector of partition into SD card sector register
		ldx #$03
l9:		lda part_startsector,x
		sta $D681,x
		dex
		bpl l9
		jsr sd_fix_sectornumber
		jsr readsector
		bcc sdcarderror		

		; MILESTONE: Have boot sector of file system
		lda #$3e           ; ">" character
		sta $07c1          ; $0400+(24*40)+1
	
		lda $DFFE
		cmp #$55
		bne badfs
		lda $DFFF
		cmp #$AA
		bne badfs

		; report file system info
		ldx #<msg_fsdetails
		ldy #>msg_fsdetails
		jsr printmessage			

		; sectors per cluster
		ldy #$00
		ldz $DE0D
		jsr printhex
		; reserved sectors
		ldz $DE0F
		jsr printhex
		ldz $DE0E
		jsr printhex
		; first cluster
		ldz $DE00+47
		jsr printhex
		ldz $DE00+46
		jsr printhex
		ldz $DE00+45
		jsr printhex
		ldz $DE00+44
		jsr printhex

		; The information of relevance we have now is:
		; $DE0D - sectors per cluster
		; $DE0E-$DE0F - reserved sectors
		; $DE10 - number of copies of FAT
		; $DE11 - Root dir entry count (0 on FAT32)
		; $DE20-$DE23 - number of sectors in the file system
		; $DE24-$DE27 - number of sectors in one copy of the FAT
		; $DE2C-$DE2F - number of reserved clusters
		
		; We need to work out if this is a FAT32 partition by working out
		; the number of clusters.  To work that out, we need to work out
		; the number of data sectors.  To work that out, we need to work out
		; the number of reserved sectors.
		
		; first, filter out obviously FAT16/FAT12 file systems
		lda $DE11
		bne badfs

		; With root directory entries = 0, the reserved sector count
		; is the number of reserved sectors, plus (copies of fat) *
		; (sectors in one copy of the fat)
		ldx #$03
l11:		lda $DE0E,x
		sta fs_syssectors,x
		lda $DE2C,x
		sta fs_reservedclusters,x
		dex
		bpl l11
		lda #$00
		sta fs_syssectors+2
		sta fs_syssectors+3
		ldy $DE10
		beq addedfatsectors
addnextfatsectors:
		ldx #$00
		clc
		php
l12:		plp
		lda fs_syssectors,x
		adc $DE24,x
		sta fs_syssectors,x
		php
		inx
		cpx #$04
		bne l12
		plp
		dey
		bne addnextfatsectors
addedfatsectors:

		; also calculate number of data sectors
		sec
		ldx #$03
l13:		lda $DE20,x
		sbc fs_syssectors,x
		sta fs_datasectors,x
		sta fs_clustercount,x
		dex
		bpl l13		

		; from number of data sectors and sectors per cluster,
		; we can work out the number of clusters.
		lda $DE0D
		sta fs_sectorspercluster
		tay
		and #$fe
		beq gotclustercount
l14:
		ldx #$03
		clc
l15:		lda fs_clustercount,x
		ror
		sta fs_clustercount,x
		dex
		bpl l15
		tya
		lsr
		tay
		and #$fe
		bne l14
gotclustercount:

		; filter out non-FAT32 filesystems
		; NOTE: FAT32 can have as few as 65525 clusters, but we do not support
		; such file systems, which should be rare, anyway.
		lda fs_clustercount+3
		ora fs_clustercount+2
		beq badfs

		ldx #<msg_reservedsectors
		ldy #>msg_reservedsectors		
		jsr printmessage
		ldy #$00
		ldz fs_syssectors+3
		jsr printhex
		ldz fs_syssectors+2
		jsr printhex
		ldz fs_syssectors+1
		jsr printhex
		ldz fs_syssectors+0
		jsr printhex

		ldz fs_datasectors+3
		jsr printhex
		ldz fs_datasectors+2
		jsr printhex
		ldz fs_datasectors+1
		jsr printhex
		ldz fs_datasectors+0
		jsr printhex

		ldz fs_clustercount+3
		jsr printhex
		ldz fs_clustercount+2
		jsr printhex
		ldz fs_clustercount+1
		jsr printhex
		ldz fs_clustercount+0
		jsr printhex
	
		; Store cluster number of root directory
		ldx #$03
l16:		lda $DE2C,x
		sta fs_rootdircluster,x
		sta fs_clusternumber,x
		dex
		bpl l16

		; MILESTONE: Have file system properties.
		lda #$3e           ; ">" character
		sta $07c2          ; $0400+(24*40)+2

		; Now load root directory cluster.
		; (fs_clusternumber was set above)
		jsr fs_clustertosector
		jsr sd_fix_sectornumber
		jsr readsector
		bcc sdcarderror

		; We are searching from the first sector of the cluster
		lda #$00
		sta fs_sector_in_cluster

		; iterate through directory entries looking for ordinary file 
		; C65GS.ROM
searchdirectorysector:
		ldz #$00

		ldy #$00
l29:		lda $DE00,y
		cmp #$40
		bcc l30
		and #$1f
l30:		sta $0608,y
		iny
		bne l29

l19b:		inc $0425
		ldy #$00
l18b:		inc $0427
		tya
		lsr
		lsr
		lsr
		lsr
		lsr
		sta $0426
		ldx #$00
l17b:		lda $DE00,y
		jsr toupper
		cmp txt_c65gsrom,y
		bne notthisentry
		iny
		inx
		cpx #$0b
		bne l17b
		; this is the entry
		inc $d020
		jmp foundromfile

notthisentry:   ; see if there are more entries in this page		
		tya
		and #$e0
		clc
		adc #$20
		tay
		cpy #$00
		bne l18b
		; no more entries in this page.  See if we have the upper half
		; of the sector to search
		tza
		bne trynextsector
		; copy upper half of sector down and search that
		ldy #$00
l20b:		lda $DF00,y
		sta $DE00,y
		iny
		bne l20b
		ldz #$01 ; remember we have looked at this half
		inc $0424
		; now search the upper half
		bra l19b 

trynextsector:
		; was not in that sector.
		; bump sector number
		lda fs_sector_in_cluster
		; XXX work around missing INC accumulator mode
		clc
		adc #$01
		sta fs_sector_in_cluster
		sta $0422
		cmp fs_sectorspercluster
		beq trynextcluster
		jsr sd_inc_fixedsectornumber
		inc $0423
		jmp searchdirectorysector
		
trynextcluster:
		jmp infinity

foundromfile:
		; MILESTONE: Have file system properties.
		lda #$3e           ; ">" character
		sta $07c3          ; $0400+(24*40)+3


		; temporary infinite loop to catch us
infinity:	inc $07e7          ; $0400+(24*40)+39
		jmp infinity

sdcarderror:	ldx #<msg_sdcarderror
		ldy #>msg_sdcarderror
		jsr printmessage
		jmp infinity

badfs:		ldx #<msg_badformat
		ldy #>msg_badformat
		jsr printmessage
		jmp infinity
;;; ----------------------------------------------------------------------------
;;; FAT file system routines
;;; ----------------------------------------------------------------------------
toupper:	; convert ASCII character to upper case
		cmp #$60
		bcc tu1
		cmp #$7a
		bcs tu1
		and #$5f
tu1:		rts

fs_clustertosector:
	; convert a cluster number in fs_clustertosector into a sector 
	; number loaded into $D681-$D684.

	  	; put cluster number into sector number	
		ldx #$03
l21:		lda fs_clusternumber,x
		sta $D681,x
		dex
		bpl l21

		; subtract number of reserved clusters
		ldx #$03
		sec
l17:		lda $D681,x
		sbc fs_reservedclusters,x
		sta $D681,x
		dex
		bpl l17

		; now shift it left according to fs_sectorspercluster
		lda fs_sectorspercluster
		tay
		and #$fe
		beq multipliedclusternumber
l22:		ldx #$00
		clc
l18:		lda $D681,x
		rol
		sta $D681,x
		inx
		cpx #$04
		bne l18
		tya
		lsr
		tay
		and #$fe
		bne l22
multipliedclusternumber:

		; skip over filesystem reserved and FAT sectors
		ldx #$00
		clc
		php
l23:		plp
		lda $D681,x
		adc fs_syssectors,x
		sta $D681,x
		php
		inx
		cpx #$04
		bne l23
		plp	

		; add start sector of partition
		ldx #$00
		clc
		php
l24:		plp
		lda $D681,x
		adc part_startsector,x
		sta $D681,x
		php
		inx
		cpx #$04
		bne l24
		plp

		rts

printsectornumber:
		ldx #<msg_sectornumber
		ldy #>msg_sectornumber
		jsr printmessage
		ldy #$00
		ldx #$03
l19:		lda fs_clusternumber,x
		taz
		phx
		jsr printhex
		plx
		dex
		bpl l19
		ldx #$03
l20:		lda $D681,x
		taz
		phx
		jsr printhex
		plx
		dex
		bpl l20
		rts

;;; ----------------------------------------------------------------------------
;;; MBP / partition routines
;;; ----------------------------------------------------------------------------

; read master boot record. Does not sanity check anything.
readmbr:
		; begin by resetting SD card
		jsr resetsd
		bcs l7
		rts

		; MBR is sector 0
l7:		lda #$00
		sta $D681
		sta $d682
		sta $d683
		sta $d684

		jmp readsector

;;; ----------------------------------------------------------------------------
;;; SD Card access routines
;;; ----------------------------------------------------------------------------
printsdaddress:
		ldx #<msg_sdaddress
		ldy #>msg_sdaddress
		jsr printmessage
		ldy #$00
		ldz $D684
		jsr printhex
		ldz $D683
		jsr printhex
		ldz $D682
		jsr printhex
		ldz $D681
		jmp printhex

sd_inc_fixedsectornumber:
		; increment fixed sector number.
		; if SDHC, then increment is simple.
		; if SD, then we add $200
		lda $D680
		and #$10
		bne sdhc1
		; sd card mode: add $200
		lda $d682
		clc
		adc #$02
		sta $d682
		bra s2
sdhc1:		; SDHC card mode: add 1
		inc $d681
		bcc s1
		inc $d682
		bcc s1
s2:		inc $d683
		bcc s1
		inc $d684
s1:		rts

sd_fix_sectornumber:
		; assumes sector number has been loaded into 
		; $D681 - $D684
		; We need to check if the card is SDHC or SD.
		; If SD, we need to shift sector number left 9 bits,
		; as SD cards address by byte, not sector.
		; If card is SD, then shift it all left nine bits
		; We detect SD versus SDHC by reading whether SD controller is
		; in SDHC or SD mode.
		lda $D680
		and #$10
		beq sdcardmode
		; SDHC mode, so nothing to do
		rts
sdcardmode:     
		; shift left 8 bits first
		lda $D683
		sta $D684
		lda $D682
		sta $D683
		lda $D681
		sta $D682
		lda #$00
		sta $D681
		; now shift it all left one bit
		lda $D682
		asl
		sta $D682
		lda $D683
		rol
		sta $D683
		lda $D684
		rol
		sta $D684
		rts

readsector:
		; Assumes fixed sector number (or byte address in case of SD cards)
		; is loaded into $D681 - $D684		

		; check if sd card is busy
		lda $d680
		and #$01
		bne rsbusyfail

		; try reading sector fast the first time
		jmp rs4

redoread:	
		; when retrying, introduce a delay.  This seems to be needed often
		; when reading the first sector after SD card reset.  
		ldx #$f0
		ldy #$00
		ldz #$00
r1:		inz
		bne r1
		iny
		bne r1
		inx
		bne r1
rs4:
		; ask for sector to be read
		lda #$02
		sta $d680

		; wait for sector to be read
		jsr resetsdtimeout
		lda #$04
		sta timerlimit
rs3:		jsr checksdtimeout
		bcc rereadsector
		lda $d680
		and #$01
		bne rs3

		; check that we read 512 bytes
		lda $d689
		cmp #$02
		bne redoread

		jsr canceltimer
		sec
		rts

		; reset sd card and try again
rereadsector:   jsr resetsd
		jsr resetsdtimeout
		jmp rs3


rsbusyfail:     ; fail
		clc 
		rts

resetsd:
		; reset the SD card.
		; This can take O(second), so we should allow some time, 
		; probably a second or more in each attempt.
		;
		; Reset involves writing $00 and then $01 to $D680, waiting
		; for bit 0 of $D680 to clear.

		; try SDHC mode first
;		lda #$41
;		sta $d680
;		jsr sdresetsequence
;		bcs resetsdok
		; then SD mode
		lda #$42
		sta $d680
		; fall through to trying SD card reset sequence

sdresetsequence:
		jsr resetsdtimeout
		lda #60
		sta timerlimit
		lda #$00
		sta $d680		
rs1:            
		jsr checksdtimeout
		bcc sdresettimedout
		lda #120
		sta timerlimit
		lda $d680
		and #$01
		bne rs1

		jsr resetsdtimeout
		lda #$01
		sta $d680		
rs2:            
		jsr checksdtimeout
		bcc sdresettimedout
		lda $d680
		and #$01
		bne rs2

		; reset succeeded
resetsdok:	jsr canceltimer
		sec
		rts

sdresettimedout: ; reset failed
		jsr canceltimer
		clc
		rts

canceltimer:
	lda #$00
	sta $dc0d
	sei
	rts

; clear timeout for sd card reset delay
resetsdtimeout:
	; use CIA to generate an interrupt periodically, and count ticks

	sei

        lda #$95
	sta $dc04
	lda #$42
	sta $dc05

	lda #$81
	sta $dc0d
	lda $dc0e
	and #$80
	ora #$11
	sta $dc0e

	lda #$00
	sta timerticks

	; XXX only needed during testing 
	lda #<sdtimerirq
	sta $0314
	lda #>sdtimerirq
	sta $0315

	cli

	sec
	rts

checksdtimeout:
	; time out after ~2 seconds
	lda timerlimit 
	cmp timerticks       
	rts

; XXX only needed during testing
sdtimerirq:
	lda $dc0d
	inc timerticks
	jmp $ea81

;;; ----------------------------------------------------------------------------
;;; ROM loading and manipulation routines
;;; ----------------------------------------------------------------------------

checkromok:
		; calculate checksum of loaded ROM ...
		jsr calcromsum
		; ... then fall through to testing it
testromsum:
		; have checksum for all slabs.
		; Map in ROM load record, and compare checksum
		; Here we have to use our extension to MAP to access >1MB
		; as only 128KB of slow ram is shadowed to $20000.
		; again, we have to take the relative nature of MAP, so
		; we ask for $FC000 to be mapped at $0000, which means that
		; $4000 will correspond to $0000 (MAP instruction address
		; space wraps around at the 1MB mark)
		
		; select 128MB mark for mapping lower 32KB of address space
		lda #$80
		ldx #$0f
		ldy #$00
		ldz #$00
		map
		; then map $FC000 + $4000 = $00000 at $4000-$7FFF
		lda #$c0
		ldx #$cf
		map
		eom
		
		lda $4000
		cmp checksum
		bne checksumfails
		lda $4001
		cmp checksum+1
		bne checksumfails
		lda $4002
		cmp checksum+2
		bne checksumfails

		jsr resetmemmap

		sec
		rts

		; check failed
checksumfails:	clc
		rts

calcromsum:	; calculate checksum of 128KB ROM
		
		; use MAP to map C65 ROM address space in 16KB
		; slabs at $4000-$7FFF.  Check sum each, and
		; then compare checksum to ROM load record.
		; ROMs get loaded into slow RAM at $8020000-$803FFFF,
		; which is shadowed for reading using C65 MAP instruction to
		; C65 address space $20000-$3FFFF.
		; Checksum and ROM load record are stored in
		; $8000000 - $800FFFF, i.e., the first 64KB of
		; slow RAM.
		;
		; The 4510 MAP instruction does not normally provide access to the
		; full 28-bit address space, so we need to use a trick.
		; We do this by interpretting a MAP instruction that says to
		; map none of the 8KB pages, but provides an offset in the range
		; $F0000 - $FFF00 to set the "super page" register for that 32KB
		; moby to bits 8 to 15 of the offset.  In practice, this means
		; to allow mapping of memory above 1MB, the MB of memory being
		; selected is chosen by the contents of A and Y registers when 
		; X and Z = $0F.
		; 
				
		; reset checksum
		; checksum is not all zeroes, so that if RAM initialises with
		; all zeroes, including in the checksum field, the checksum will
		; not pass.
		lda #$03
		sta checksum
		sta checksum+1
		sta checksum+2
		sta checksum+3

		; start with bottom 16KB of ROM
		; we count in 16KB slabs, and ROM starts at 128KB mark,
		; so we want to check from the 8th to 15th slabs inclusive.
		lda #$08
		sta romslab

		; Summing can be done using normal use of MAP instruction,
		; since slow RAM is shadowed as ROM to $20000-$3FFFF

sumslab:	; romcheckslab indicates which 16KB piece.
		; MAP uses 256-byte granularity, so we need to shift left
		; 6 bits into A, and right 2 bits into X.
		; We then set the upper two bits in X to indicate that the mapping
		; applies to blocks 2 and 3.
		; BUT MAP is relative, and since we are mapping at the 16KB mark,
		; we need to subtract 1 lot of 16KB from the result.
		; this is easy -- we just sbc #$01 from romslab before using it.
		lda romslab
		sec 
		sbc #$01
		lsr
		lsr
		ora #$c0
		tax
		lda romslab
		sec
		sbc #$01
		asl
		asl
		asl
		asl
		asl
		asl
		; don't mess with mapping of upper 32KB.
		; XXX - requires MAP to be bug fixed for interaction with ROM mapping.
		ldy #$00
		ldz #$00
		map
		eom
		
		; sum contents of 16KB slab
		lda #$00
		sta zptempv
		lda #$40
		sta zptempv+1
		
sumpage:	ldy #$00
sumbyte:	lda checksum
		clc
		adc (zptempv),y
		sta checksum
		bcc l6
		inc checksum+1
		bcc l6
		inc checksum+2
l6:		iny
		bne sumbyte
		inc zptempv+1
		lda zptempv+1
		cmp #$80
		bne sumpage
		
		inc romslab
		lda romslab
		cmp #$10
		bne sumslab

		jmp resetmemmap

;;; ----------------------------------------------------------------------------
;;; Display and basic IO routines
;;; ----------------------------------------------------------------------------

resetdisplay:
		; reset screen
		lda #$00
		sta $D020
		sta $D021
		; We use VIC-II style registers as this resets video frame in
		; least instructions, and 40 columns is fine for us.
		lda #$1B
		sta $D011
		lda #$C8
		sta $D016
		lda #$14
		sta $D018
		; point VIC-IV to bottom 16KB of display memory
		lda #$ff
		sta $DD01
		sta $DD00
		rts

resetpalette:
		; reset VIC-IV palette to sensible defaults.
		; for now, just define black and white
		lda #$00
		sta $D100
		sta $D200
		sta $D300
		lda #$ff
		sta $D101
		sta $D201
		sta $D301
		rts

; erase standard 40-column screen
erasescreen:
		ldx #$00
		lda #$20
		ldy #$01
l3:		; fill screen with spaces
		sta $0400,x
		sta $0500,x
		sta $0600,x
		sta $0700,x
		; colour RAM to white
		sty $d800,x
		sty $d900,x
		sty $da00,x
		sty $db00,x
		inx
		bne l3

		lda #$00
		sta screenrow

		rts

printmessage:
		stx zptempv
		sty zptempv+1
		lda #$00
		sta zptempv2
		lda #$04
		sta zptempv2+1
		ldx screenrow
pm2:		cpx #$00
		beq pm1
		clc
		lda zptempv2
		adc #$28
		sta zptempv2
		lda zptempv2+1
		adc #$00
		sta zptempv2+1
		dex
		bne pm2
pm1:
		ldy #$27
pm3:		lda (zptempv),y
		; convert ASCII/PETSCII to screen codes
		cmp #$40
		bcc pm4
		and #$1f
pm4:		sta (zptempv2),y
		dey
		bpl pm3

		inc screenrow

		rts

printhex:	
		; output contents of Z on last written screen line
		tza
		lsr
		lsr
		lsr
		lsr
		jsr printhexdigit		
		tza
		and #$0f
printhexdigit:
		; find next $ sign to replace with hex digit
		tax
phd3:		lda (zptempv2),y
		cmp #$24
		beq phd2
		iny
		cpy #$28
		bne phd3
		rts
phd2:		txa

		ora #$30
		cmp #$3a
		bcc phd1
		sbc #$39
phd1:		sta (zptempv2),y
		iny
		rts

; Transfer control to C64 kernel.
; (This also allows entry to C65 mode, because the
;  C64-mode kernel on the C65 checks if C65 mode
;  should be entered.)
go64:
		; C64 IO map
		clc
		jsr enhanced_io
		; copy routine to stack to switch to
		; C64 memory map and enter via reset
		; vector.  
		ldx #$00
l2:		lda go64ramroutine,x
		sta $0140,x
		inx
		cpx #go64ramroutineend-go64ramroutine
		bne l2
		jmp $0140
		
; This routine is copied to RAM, since writing to $01
; will de-map the kickstart ROM.
go64ramroutine:	lda #$37
		sta $01
		sta $00
		jmp (reset_vector)
go64ramroutineend:

; reset memory map to default
resetmemmap:
		lda #$00
		ldx #$0f
		ldy #$00
		ldz #$0f
		map
		; also clear memory MAP MB offset register
		tax
		taz
		map
		eom
		rts


; If C=1, enable enhanced IO bank, else return to
; C64 standard IO map.
enhanced_io:
		bcs l1
		; Return to VIC-II / C64 IO
		lda #$00
		sta $D02F
l1:		; Enable VIC-IV / C65GS IO
		lda #$47
		sta $D02F
		lda #$53
		sta $D02F
		RTS

; messages.  All have to be 40 bytes long
msg_kickstart:        .byte "C65GS KICKSTART V00.00 PRE-ALPHA        "
msg_romok:            .byte "ROM CHECKSUM OK - BOOTING               "
msg_rombad:	      .byte "ROM CHECKSUM FAIL - LOADING ROM         "
msg_tryingsdcard:     .byte "LOOKING FOR SDCARD...                   "
msg_sdcarderror:      .byte "ERROR READING FROM SD CARD              "
msg_badformat:	      .byte "BAD MBR OR DOS BOOT SECTOR.             "
msg_sdcardfound:      .byte "READ PARTITION TABLE FROM SDCARD        "
msg_partitiondetails: .byte "PARTITION 1($$) @$$$$$$$$, SIZE $$$$$$$$"
msg_fsdetails: 	      .byte " FS SPC:$$ RSVSEC:$$$$ RSVCLUS:$$$$$$$$ "
msg_reservedsectors:  .byte " SYS:$$$$$$$$ DAT:$$$$$$$$ CLUS:$$$$$$$$"
msg_sectornumber:     .byte " CLUSTER:$$$$$$$$ -> SECTOR:$$$$$$$$    "
msg_sdaddress:	      .byte " D684-D681=$$$$$$$$                     "

; filename of ROM we want to load in FAT directory format
txt_c65gsrom:	      .byte "C65GS   ROM"

;;; ----------------------------------------------------------------------------
;;; CPU entry vectors
;;; ----------------------------------------------------------------------------
		
; For now we have no use for NMI
nmi_entry:	rti
; IRQ is used for SD card timeouts
irq_entry:	pha
		php
		lda $DC0D
		inc timerticks
		plp
		pla
		rti

; 6502 interrupt and reset vectors
       		.checkpc $FFFA
		.advance $FFFA
nmi_vector:	.word nmi_entry
reset_vector:	.word reset_entry
irq_vector:	.word irq_entry

		 .outfile "kickstart65gs.bin"